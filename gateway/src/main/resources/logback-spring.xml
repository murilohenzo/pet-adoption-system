<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%cyan(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%logger{36}): %msg%n%throwable</pattern>
        </encoder>
    </appender>

    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>

    <logger name="org.springframework.security" level="DEBUG"/>

</configuration>

<!--`<?xml version="1.0" encoding="UTF-8"?>`: Esta linha declara que o arquivo é um documento XML e especifica a versão do XML e a codificação utilizada.-->
<!--`<configuration>`: Este é o elemento raiz do arquivo de configuração do Logback. Todo o conteúdo do arquivo está contido dentro deste elemento. -->
<!--`<include resource="org/springframework/boot/logging/logback/defaults.xml" />`: Esta linha inclui um arquivo de configuração de log padrão fornecido pelo Spring Boot. Ele define algumas configurações padrão para o logging, como o nível de log padrão para diferentes pacotes.-->
<!--`<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">`: Aqui, um novo appender é definido com o nome "STDOUT". Este appender direcionará as mensagens de log para a saída padrão do console. O atributo `class` especifica a classe Java que implementa esse appender, neste caso, `ConsoleAppender`.-->
<!--`<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">`: Este elemento define o codificador (encoder) para o appender "STDOUT". O codificador é responsável por formatar as mensagens de log antes de serem enviadas para a saída. Aqui, estamos utilizando o `PatternLayoutEncoder`, que permite configurar um padrão de formatação para as mensagens de log.-->
<!--`<pattern>%black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%logger{36}): %msg%n%throwable</pattern>`: Este é o padrão de formatação das mensagens de log. Ele define como cada mensagem de log será formatada. Por exemplo, `%d{ISO8601}` representa a data e hora no formato ISO 8601, `%level` representa o nível de log da mensagem e assim por diante.-->
<!--`<root level="INFO">`: Este elemento define o nível de log raiz para todas as mensagens de log. Neste caso, o nível de log é definido como INFO, o que significa que mensagens com nível de log INFO ou superior serão registradas.-->
<!--`<appender-ref ref="STDOUT" />`: Aqui, estamos referenciando o appender "STDOUT" definido anteriormente e associando-o ao root logger. Isso significa que todas as mensagens de log serão direcionadas para o appender "STDOUT".-->
<!--`<logger name="org.springframework.security" level="DEBUG"/>`: Este elemento define um logger específico para o pacote "org.springframework.security". Ele define o nível de log para DEBUG, o que significa que mensagens de log DEBUG ou superiores para esse pacote serão registradas com este nível de log. Isso permite um controle mais granular sobre o nível de log para diferentes partes do aplicativo.-->