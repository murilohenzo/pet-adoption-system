openapi: 3.0.3
info:
  title: Pets API
  version: 0.0.1
tags:
  - name: pets
    description: Everything about your Pets
servers:
  - url: http://localhost:8080
    description: Localhost server
paths:
  /pets:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '405':
          description: Invalid input
      x-inner-class: false
    get:
      tags:
        - pet
      summary: Find all pets
      operationId: findAllPets
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PetResponse'
        '400':
          description: Invalid request payload
      x-inner-class: false
  /pets/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: "Status values that need to be considered for filter. Acceptable values: 'available', 'pending', 'sold'"
          required: false
          explode: true
          schema:
            type: string
            enum:
              - AVAILABLE
              - PENDING
              - DONATED
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetResponse'
        '400':
          description: Invalid status value
      x-inner-class: false
  /pets/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      x-inner-class: false
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      x-inner-class: false
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          description: Pet id to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      x-inner-class: false
  /pets/{petId}/photo:
    post:
      tags:
        - pet
      summary: Upload image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  nullable: false
                  required:
                    - image
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetPhotoResponse'
        '400':
          description: Invalid request payload
      x-inner-class: false
    get:
      tags:
        - pet
      summary: Download image
      operationId: downloadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
      x-inner-class: false

components:
  schemas:
    PetRequest:
      type: object
      properties:
        name:
          type: string
          example: java
          nullable: false
          maxLength: 30
          minimum: 10
        description:
          type: string
          example: This cat is very beautiful
          maxLength: 250
          minimum: 50
          nullable: false
        gender:
          type: string
          nullable: false
          example: FEMALE
          enum:
            - FEMALE
            - MALE
        species:
          type: string
          description: Pet specie
          enum:
            - CAT
            - DOG
          example: CAT
        entryDate:
          type: string
          format: date
          nullable: false
        breed:
          type: string
          nullable: false
          example: Persa
        ageMoths:
          type: integer
          nullable: false
          description: Age in months
          example: 2
      required:
        - name
        - description
        - gender
        - species
        - entryDate
        - breed
        - ageMoths
      title: PetRequest
    PetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        status:
          type: string
          description: Pet status in the store
          enum:
            - AVAILABLE
            - PENDING
            - DONATED
        species:
          type: string
          description: Pet specie
          enum:
            - CAT
            - DOG
          example: CAT
        description:
          type: string
          maxLength: 250
        breed:
          type: string
          nullable: false
          example: Persa
        ageMoths:
          type: integer
          description: Age in months
        entryDate:
          type: string
          format: date
          description: Check in date of the pet
        createdAt:
          type: string
          format: date-time
          description: Creation date of the pet
        updatedAt:
          type: string
          format: date-time
          description: Last update date of the pet
      title: PetResponse
    PetPhotoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the photo
        petId:
          type: integer
          format: int64
          description: ID of the Pet associated with the photo
        photoUrl:
          type: string
          description: Photo URL
        name:
          type: string
          description: Image name
        size:
          type: number
          description: Image size
        contentType:
          type: string
          description: Image content type
        createdAt:
          type: string
          format: date-time
          description: Photo creation date
        storageReferenceKey:
          type: string
          description: Storage Reference Key
        updatedAt:
          type: string
          format: date-time
          description: Last update date of the photo
    Problem:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        title:
          type: string
        message:
          type: string
        path:
          type: string
        timestamp:
          type: string
          format: date-time
      title: Problem
